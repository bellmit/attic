package io.github.unacceptable.alias;

import java.util.Random;

public class UsernameGenerator implements Generator<String> {
    private static final Random RANDOM = new Random();
    private static final int DEFAULT_MAX_LENGTH = 32;
    private static final String DEFAULT_SEPARATOR = "-";
    private static final UsernameGenerator GENERATOR = new UsernameGenerator();
    private final Generator<String> generator;

    /**
     * Generate a username using sensible defaults.
     *
     * @param alias
     *         the alias for the generated username.
     * @return a username generated with appropriate default values.
     * @see #generate(String)
     */
    public static String defaultGenerate(String alias) {
        return GENERATOR.generate(alias);
    }

    private final int maxLength;
    private final String separator;

    public UsernameGenerator() {
        this(DEFAULT_MAX_LENGTH, DEFAULT_SEPARATOR);
    }

    public UsernameGenerator(final int maxLength) {
        this(maxLength, DEFAULT_SEPARATOR);
    }

    public UsernameGenerator(final int maxLength, final String separator) {
        this.maxLength = maxLength;
        this.separator = separator;
        generator = new EmptyWrappingGenerator(new AbsentWrappingGenerator(new LiteralWrappingGenerator(this::generateUsername)));
    }

    @Override
    public String generate(final String alias) {
        return generator.generate(alias);
    }

    /**
     * Generates random usernames, given a username template. A random suffix, generated by selecting a random
     * non-negative <code>long</code> and formatting it as lowercase hexadecimal, will be appended to the name. The
     * resulting name will be no longer than {@link #maxLength} characters or the length of the original alias,
     * whichever is longer.
     *
     * @param alias
     *         a username alias, such as <code>"derek"</code>.
     * @return a randomly-generated username, such as <code>"derek-abad1dea"</code>.
     */
    public String generateUsername(String alias) {
        String unique = generateUniquePart();
        return concat(alias, unique);
    }


    private String concat(String alias, String unique) {
        int maxLengthOfAliasToUse = maxLength - separator.length()
                - unique.length();
        if (maxLengthOfAliasToUse > alias.length()) {
            return alias + separator + unique;
        } else if (maxLengthOfAliasToUse > 0) {
            return alias.substring(0, maxLengthOfAliasToUse) + separator
                    + unique;
        } else {
            return unique;
        }
    }

    private static String generateUniquePart() {
        long nonce = RANDOM.nextLong();
        return String.format("%016x", nonce);
    }
}
