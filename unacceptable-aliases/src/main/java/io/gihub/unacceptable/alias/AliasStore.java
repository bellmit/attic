package io.github.unacceptable.alias;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

/**
 * Generates and stores randomly-generated values for alias names. For example, an AliasStore might map username aliases
 * (used in tests) to displayNames (used by the driver).
 */
public class AliasStore {

    public static final String ABSENT = "ABSENT";

    private final Map<String, String> nameByAliasMap = new HashMap<>();
    private final Function<String, String> nameGenerator;

    public AliasStore(Function<String, String> nameGenerator) {
        this.nameGenerator = nameGenerator;
    }

    /**
     * Converts an alias into a (possibly generated) value.
     * <p>
     * First, {@code null} alias are mapped to {@code null} and returned as-is.
     * <p>
     * Then, aliases wrapped in "&lt;" and "&gt;" <em>at the ends only</em> are treated as literal, and will be returned
     * without translation, with the brackets removed.
     * <p>
     * Then, if the alias is {@value #ABSENT}, the resulting value is {@code null}.
     * <p>
     * Then, if the alias was not {@code null}, no a verbatim alias, not the absent value, and if the alias has never
     * been used before in this AliasStore, a value will be generated by passing the alias to the underlying name
     * generator. The result will be stored for future use, then returned.
     * <p>
     * Finally, if the alias <em>has</em> been generated before, the previous result will be returned directly.
     *
     * @param alias
     *         the alias to find a value for, or {@code null}.
     * @return the resulting value, or {@code null} if the alias was {@code null} or {@value #ABSENT}.
     */
    public String resolve(String alias) {
        if (alias == null) {
            return null;
        }
        if (alias.startsWith("<") && alias.endsWith(">")) {
            return alias.substring(1, alias.length() - 1);
        }
        if (alias.equals(ABSENT)) {
            return null;
        }
        if (alias.isEmpty()) {
            return "";
        }
        // computeIfAbsent handles null in ways that are incompatible with #store(...) below.
        if (nameByAliasMap.containsKey(alias)) {
            return nameByAliasMap.get(alias);
        }

        String name = nameGenerator.apply(alias);
        nameByAliasMap.put(alias, name);
        return name;
    }

    /**
     * Set an alias to a specific, known value. This value will be returned from future calls to {@link
     * #resolve(String)}} for the same alias.
     *
     * @param alias
     *         the alias to store.
     * @param value
     *         the value to store for the alias. This may be {@code null}; resolving the alias in this case will return
     *         {@code null}.
     */
    public void store(String alias, String value) {
        nameByAliasMap.put(alias, value);
    }
}
