package io.github.unacceptable.alias;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

/**
 * Generates and stores randomly-generated values for alias names. For example, an AliasStore might map username aliases
 * (used in tests) to usernames (used by the driver).
 */
public class AliasStore {

    private final Map<String, String> nameByAliasMap = new HashMap<>();
    private final Function<String, String> nameGenerator;

    public AliasStore(Function<String, String> nameGenerator) {
        this.nameGenerator = nameGenerator;
    }

    /**
     * Converts an alias into a (possibly generated) value.
     * <p>
     * First, aliases wrapped in "&lt;" and "&gt;" <em>at the ends only</em> are treated as literal, and will be
     * returned without translation, with the brackets removed.
     * <p>
     * Then, if the alias was not a verbatim alias, and if the alias has never been used before in this AliasStore, a
     * value will be generated by passing the alias to the underlying name generator. The result will be stored for
     * future use, then returned.
     * <p>
     * Finally, if the alias <em>has</em> been generated before, the previous result will be returned directly.
     *
     * @param alias
     *         the alias to find a value for.
     * @return the resulting value.
     */
    public String resolve(String alias) {
        if (alias.startsWith("<") && alias.endsWith(">")) {
            return alias.substring(1, alias.length() - 1);
        }
        return nameByAliasMap.computeIfAbsent(alias, nameGenerator);
    }
}
