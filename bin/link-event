#!/usr/bin/env python3

import argparse
import collections as c
import datetime as dt
import dateutil.parser as dp
import email
import os
import os.path as path
import yaml

def find_email_timestamp(document):
    with open(document, 'r') as file:
        message = email.message_from_file(file)
    message_date = message['Date']
    return email.utils.parsedate_to_datetime(message_date)

deducers = {
    '.eml': find_email_timestamp
}

def find_suffix(document):
    for suffix in deducers.keys():
        if document.endswith(suffix):
            return suffix
    return document[document.rfind('.'):]

def find_timestamp(document, suffix):
    deducer = deducers[suffix]
    return deducer(document)

def normalize_utc_timestamp(timestamp):
    utc_message_timestamp = timestamp.astimezone(dt.timezone.utc)
    return utc_message_timestamp.replace(tzinfo=None)

def base_filename(timestamp):
    return timestamp.isoformat('-', 'seconds')

def default_metadata():
    return c.OrderedDict(
        event=dict(
            summary='Something significant happened',
        ),
        diff=dict(
            field='new value',
        )
    )

def make_event(document, collection, normal_timestamp, suffix):
    event_base = base_filename(normal_timestamp)

    event_metadata = default_metadata()

    metadata_file = path.join(collection, '{base}.yaml'.format(base=event_base))
    flags = os.O_WRONLY | os.O_CREAT | os.O_EXCL | os.O_NOFOLLOW
    with os.fdopen(os.open(metadata_file, flags), 'w') as meta:
        yaml.dump(event_metadata, meta, explicit_start=True, default_flow_style=False)

    document_link = path.join(
        collection,
        '{base}{suffix}'.format(base=event_base, suffix=suffix)
    )
    document_target = path.relpath(document, collection)
    os.symlink(document_target, document_link)

    return metadata_file

def represent_ordereddict(dumper, data):
    # Cribbed wholesale from http://stackoverflow.com/a/16782282
    value = []

    for item_key, item_value in data.items():
        node_key = dumper.represent_data(item_key)
        node_value = dumper.represent_data(item_value)

        value.append((node_key, node_value))

    return yaml.nodes.MappingNode(u'tag:yaml.org,2002:map', value)

def configure_yaml():
    yaml.add_representer(c.OrderedDict, represent_ordereddict)

def parse_args():
    parser = argparse.ArgumentParser(description='Create an event from a document')
    parser.add_argument('--timestamp', '-t', type=dp.parse, help='override timestamp detection (ISO 8601 or any dateutil format)')
    parser.add_argument('document', help='base document for the event')
    parser.add_argument('collection', help='event collection directory to write event into')
    return parser.parse_args()

def main():
    configure_yaml()
    args = parse_args()
    suffix = find_suffix(args.document)
    timestamp = args.timestamp if args.timestamp else find_timestamp(args.document, suffix)
    normal_timestamp = normalize_utc_timestamp(timestamp)
    print(make_event(args.document, args.collection, normal_timestamp, suffix))

if __name__ == '__main__':
    main()
